// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using DTOMaker.Runtime;
using DTOMaker.Runtime.MessagePack;
using MessagePack;
using System;

namespace MyOrg.DomainA.MessagePack
{
    [MessagePackObject]
    public partial class MyDTO1 : DTOMaker.Runtime.MessagePack.EntityBase, IMyDTO1, IEquatable<MyDTO1>
    {
        // Derived entities: 0

        public new const int EntityKey = 1;

        private static readonly MyDTO1 _empty = new MyDTO1();
        public static MyDTO1 Empty => _empty;

        public new static MyDTO1 Create(int entityKey, ReadOnlyMemory<byte> buffer)
        {
            return entityKey switch
            {
                _ => throw new ArgumentOutOfRangeException(nameof(entityKey), entityKey, null)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
            // todo freezable members
        }

        protected override IFreezable OnPartCopy() => new MyDTO1(this);

        public MyDTO1() { }
        public MyDTO1(IMyDTO1 source) : base(source)
        {
            _Field1 = source.Field1;
        }

        [IgnoreMember]
        private Int64 _Field1 = default;
        [Key(1)]
        public Int64 Field1
        {
            get => _Field1;
            set => _Field1 = IfNotFrozen(ref value);
        }


        public bool Equals(MyDTO1? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Field1 != other.Field1) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is MyDTO1 other && Equals(other);
        public static bool operator ==(MyDTO1? left, MyDTO1? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(MyDTO1? left, MyDTO1? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Field1);
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
