// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using DTOMaker.Runtime;
using DTOMaker.Runtime.MessagePack;
using MessagePack;
using System;

namespace MyOrg.DomainB.MessagePack
{
    [MessagePackObject]
    public partial class MyDTO2 : DTOMaker.Runtime.MessagePack.EntityBase, IMyDTO2, IEquatable<MyDTO2>
    {
        // Derived entities: 0

        public new const int EntityKey = 2;

        public new static MyDTO2 Create(int entityKey, ReadOnlyMemory<byte> buffer)
        {
            return entityKey switch
            {
                _ => throw new ArgumentOutOfRangeException(nameof(entityKey), entityKey, null)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
            _Member1?.Freeze();
        }

        protected override IFreezable OnPartCopy() => new MyDTO2(this);

        public MyDTO2() { }
        public MyDTO2(IMyDTO2 source) : base(source)
        {
            _Member1 = source.Member1 is null ? null : new MyOrg.DomainA.MessagePack.MyDTO1(source.Member1);
        }

        [IgnoreMember]
        private MyOrg.DomainA.MessagePack.MyDTO1? _Member1;
        [Key(T_NullableEntityMemberKey_)]
        public MyOrg.DomainA.MessagePack.MyDTO1? Member1
        {
            get => _Member1;
            set => _Member1 = IfNotFrozen(ref value);
        }
        MyOrg.DomainA.IMyDTO1? IMyDTO2.Member1
        {
            get => _Member1;
            set
            {
                ThrowIfFrozen();
                _Member1 = value is null ? null : new MyOrg.DomainA.MessagePack.MyDTO1(value);
            }
        }


        public bool Equals(MyDTO2? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Member1 != other.Member1) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is MyDTO2 other && Equals(other);
        public static bool operator ==(MyDTO2? left, MyDTO2? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(MyDTO2? left, MyDTO2? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Member1);
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
