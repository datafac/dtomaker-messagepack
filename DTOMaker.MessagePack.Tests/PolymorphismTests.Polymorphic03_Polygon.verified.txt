// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using DTOMaker.Runtime;
using DTOMaker.Runtime.MessagePack;
using MessagePack;
using System;

namespace MyOrg.Models.MessagePack
{
    [MessagePackObject]
    [Union(Equilateral.EntityKey, typeof(Equilateral))]
    [Union(Rectangle.EntityKey, typeof(Rectangle))]
    [Union(RightTriangle.EntityKey, typeof(RightTriangle))]
    [Union(Square.EntityKey, typeof(Square))]
    public abstract partial class Polygon { }
    public partial class Polygon : DTOMaker.Runtime.MessagePack.EntityBase, IPolygon, IEquatable<Polygon>
    {
        // Derived entities: 6
        // - Equilateral
        // - Quadrilateral
        // - Rectangle
        // - RightTriangle
        // - Square
        // - Triangle

        public new const int EntityKey = 1;

        public new static Polygon Create(int entityKey, ReadOnlyMemory<byte> buffer)
        {
            return entityKey switch
            {
                MyOrg.Models.MessagePack.Equilateral.EntityKey => MessagePackSerializer.Deserialize<MyOrg.Models.MessagePack.Equilateral>(buffer, out var _),
                MyOrg.Models.MessagePack.Rectangle.EntityKey => MessagePackSerializer.Deserialize<MyOrg.Models.MessagePack.Rectangle>(buffer, out var _),
                MyOrg.Models.MessagePack.RightTriangle.EntityKey => MessagePackSerializer.Deserialize<MyOrg.Models.MessagePack.RightTriangle>(buffer, out var _),
                MyOrg.Models.MessagePack.Square.EntityKey => MessagePackSerializer.Deserialize<MyOrg.Models.MessagePack.Square>(buffer, out var _),
                _ => throw new ArgumentOutOfRangeException(nameof(entityKey), entityKey, null)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public Polygon() { }
        public Polygon(IPolygon source) : base(source)
        {
        }


        public bool Equals(Polygon? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Polygon other && Equals(other);
        public static bool operator ==(Polygon? left, Polygon? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Polygon? left, Polygon? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
