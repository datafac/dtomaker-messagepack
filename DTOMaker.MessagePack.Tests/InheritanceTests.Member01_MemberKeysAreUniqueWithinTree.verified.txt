// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using DTOMaker.Runtime;
using DTOMaker.Runtime.MessagePack;
using MessagePack;
using System;

namespace MyOrg.Models.MessagePack
{
    [MessagePackObject]
    public partial class MyDTO : MyOrg.Models.MessagePack.MyBase, IMyDTO, IEquatable<MyDTO>
    {
        // Derived entities: 0

        public new const int EntityKey = 2;

        public new static MyDTO Create(int entityKey, ReadOnlyMemory<byte> buffer)
        {
            return entityKey switch
            {
                _ => throw new ArgumentOutOfRangeException(nameof(entityKey), entityKey, null)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
            // todo freezable members
        }

        protected override IFreezable OnPartCopy() => new MyDTO(this);

        public MyDTO() { }
        public MyDTO(IMyDTO source, bool frozen = false) : base(source, frozen)
        {
            _DTOField1 = source.DTOField1;
        }

        [IgnoreMember]
        private Double _DTOField1 = default;
        [Key(11)]
        public Double DTOField1
        {
            get => _DTOField1;
            set => _DTOField1 = IfNotFrozen(ref value);
        }


        public bool Equals(MyDTO? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_DTOField1 != other.DTOField1) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is MyDTO other && Equals(other);
        public static bool operator ==(MyDTO? left, MyDTO? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(MyDTO? left, MyDTO? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_DTOField1);
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
